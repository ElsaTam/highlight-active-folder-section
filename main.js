/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FolderHighlighter
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  highlightedFolderColor: "#eeeeee",
  highlightFolderTitleColor: false,
  highlightedFolderTitleColor: "#ffffff00",
  highlightedFolderTextColor: "#000000",
  highlightParentFolder: false,
  highlightedParentFolderColor: "#dddddd",
  highlightedParentFolderTextColor: "#000000",
  highlightedFolderBorderRadius: "5px",
  highlightedParentFolderBorderRadius: "5px"
};
var FolderHighlighter = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.styleEl = null;
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new FolderHighlighterSettingTab(this.app, this));
    this.updateStyles();
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", () => {
        this.highlightFolders();
      })
    );
    this.app.workspace.onLayoutReady(() => {
      this.highlightFolders();
      this.updateStyles();
      setTimeout(() => {
        this.updateStyles();
        this.highlightFolders();
      }, 500);
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.updateStyles();
  }
  highlightFolders() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile)
      return;
    const allFolders = document.querySelectorAll(".nav-folder");
    allFolders.forEach((folder) => {
      folder.classList.remove("highlighted-folder", "highlighted-parent-folder");
    });
    const currentFolder = this.getParentFolderElement(activeFile.path);
    if (currentFolder) {
      currentFolder.classList.add("highlighted-folder");
      if (this.settings.highlightParentFolder) {
        const rootFolder = this.getRootFolderInPath(activeFile.path);
        if (rootFolder && rootFolder !== currentFolder) {
          rootFolder.classList.add("highlighted-parent-folder");
        }
      }
    }
  }
  getParentFolderElement(filePath) {
    const folderPaths = filePath.split("/");
    folderPaths.pop();
    let folderElement = null;
    while (folderPaths.length > 0) {
      const folderName = folderPaths.join("/");
      const possibleFolderElement = document.querySelector(`[data-path="${folderName}"]`);
      if (possibleFolderElement) {
        folderElement = possibleFolderElement.closest(".nav-folder");
        break;
      }
      folderPaths.pop();
    }
    return folderElement;
  }
  getRootFolderInPath(filePath) {
    var _a;
    const folderPaths = filePath.split("/");
    folderPaths.pop();
    if (folderPaths.length > 0) {
      const rootFolderName = folderPaths[0];
      return ((_a = document.querySelector(`[data-path="${rootFolderName}"]`)) == null ? void 0 : _a.closest(".nav-folder")) || null;
    }
    return null;
  }
  updateStyles() {
    if (!this.styleEl) {
      this.styleEl = document.createElement("style");
      this.styleEl.id = "folder-highlighter-styles";
      document.head.appendChild(this.styleEl);
    }
    const styleContent = `
            .highlighted-folder {
                background-color: ${this.settings.highlightedFolderColor} !important;
                border-radius: ${this.settings.highlightedFolderBorderRadius} !important;
            }
            .highlighted-folder > .nav-folder-title {
                ${this.settings.highlightFolderTitleColor ? `background-color: ${this.settings.highlightedFolderTitleColor} !important;` : ""}
                color: ${this.settings.highlightedFolderTextColor} !important;
            }
            .highlighted-parent-folder {
                background-color: ${this.settings.highlightedParentFolderColor} !important;
                border-radius: ${this.settings.highlightedParentFolderBorderRadius} !important;
            }
            .highlighted-parent-folder > .nav-folder-title {
                color: ${this.settings.highlightedParentFolderTextColor} !important;
            }
        `;
    this.styleEl.textContent = styleContent;
  }
  onunload() {
    if (this.styleEl) {
      this.styleEl.remove();
    }
  }
};
var FolderHighlighterSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Folder Highlighter Settings" });
    const createColorSetting = (name, desc, key) => {
      let savedColor = this.plugin.settings[key];
      let alphaValue = 1;
      const match = savedColor.match(/rgba\((\d+), (\d+), (\d+), ([\d.]+)\)/);
      if (match) {
        alphaValue = parseFloat(match[4]);
      }
      new import_obsidian.Setting(containerEl).setName(name).setDesc(desc).addText((text) => {
        var _a, _b, _c;
        text.setPlaceholder("#eeeeee").setValue(savedColor.toString()).onChange(async (value) => {
          this.plugin.settings[key] = value;
          await this.plugin.saveSettings();
        });
        text.inputEl.style.width = "150px";
        const colorPicker = document.createElement("input");
        colorPicker.type = "color";
        const rgbColor = this.extractRgbFromRgba(savedColor.toString());
        colorPicker.value = this.rgbToHex(rgbColor);
        colorPicker.title = "Choose a color";
        colorPicker.addEventListener("input", async (event) => {
          const value = event.target.value;
          const rgb = this.hexToRgb(value);
          this.plugin.settings[key] = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${alphaValue})`;
          await this.plugin.saveSettings();
          text.setValue(this.plugin.settings[key]);
        });
        (_a = text.inputEl.parentElement) == null ? void 0 : _a.appendChild(colorPicker);
        const transparencySlider = document.createElement("input");
        transparencySlider.type = "range";
        transparencySlider.min = "0";
        transparencySlider.max = "1";
        transparencySlider.step = "0.01";
        transparencySlider.value = alphaValue.toString();
        transparencySlider.style.marginLeft = "10px";
        transparencySlider.title = "Move the slider to adjust transparency";
        transparencySlider.addEventListener("input", async (event) => {
          alphaValue = parseFloat(event.target.value);
          const rgb = this.hexToRgb(colorPicker.value);
          this.plugin.settings[key] = `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${alphaValue})`;
          await this.plugin.saveSettings();
          text.setValue(this.plugin.settings[key]);
        });
        (_b = text.inputEl.parentElement) == null ? void 0 : _b.appendChild(transparencySlider);
        const resetButton = document.createElement("button");
        resetButton.textContent = "Reset";
        resetButton.title = "Reset to previous color";
        resetButton.style.marginLeft = "10px";
        resetButton.addEventListener("click", async () => {
          this.plugin.settings[key] = savedColor;
          await this.plugin.saveSettings();
          const rgbColor2 = this.extractRgbFromRgba(savedColor.toString());
          colorPicker.value = this.rgbToHex(rgbColor2);
          const alpha = this.extractAlphaFromRgba(savedColor.toString());
          transparencySlider.value = alpha.toString();
          text.setValue(savedColor.toString());
        });
        (_c = text.inputEl.parentElement) == null ? void 0 : _c.appendChild(resetButton);
      });
    };
    createColorSetting("Folder Section Background-Color", "Choose a background-color of the active folder-container.", "highlightedFolderColor");
    new import_obsidian.Setting(containerEl).setName("Folder Background Color").setDesc("Enable background-color of the folder title.").addToggle((toggle) => toggle.setValue(this.plugin.settings.highlightFolderTitleColor).onChange(async (value) => {
      this.plugin.settings.highlightFolderTitleColor = value;
      if (!value) {
        this.plugin.settings.highlightedFolderTitleColor = "#ffffff00";
      }
      await this.plugin.saveSettings();
      this.display();
      this.plugin.updateStyles();
    }));
    if (this.plugin.settings.highlightFolderTitleColor) {
      createColorSetting("Folder Background-Color", "Choose a color for the highlighted folder title.", "highlightedFolderTitleColor");
    }
    createColorSetting("Folder Text Color", "Choose a color for the highlighted folder text.", "highlightedFolderTextColor");
    new import_obsidian.Setting(containerEl).setName("Folder Border Radius").setDesc("Set the border radius of the highlighted folder.").addSlider((slider) => slider.setLimits(0, 50, 1).setValue(parseInt(this.plugin.settings.highlightedFolderBorderRadius)).onChange(async (value) => {
      const radiusWithPx = `${value}px`;
      this.plugin.settings.highlightedFolderBorderRadius = radiusWithPx;
      await this.plugin.saveSettings();
      this.plugin.updateStyles();
    }).setDynamicTooltip());
    new import_obsidian.Setting(containerEl).setName("Highlight Root Folder").setDesc("Enable background-color of the root folder segment in the path to the active note.").addToggle((toggle) => toggle.setValue(this.plugin.settings.highlightParentFolder).onChange(async (value) => {
      this.plugin.settings.highlightParentFolder = value;
      await this.plugin.saveSettings();
      this.display();
    }));
    if (this.plugin.settings.highlightParentFolder) {
      createColorSetting("Root Folder Section Background-Color", "Choose a background-color of the root folder segment.", "highlightedParentFolderColor");
      createColorSetting("Root Folder Text Color", "Choose a color for the highlighted root folder text.", "highlightedParentFolderTextColor");
    }
    new import_obsidian.Setting(containerEl).setName("Root Folder Border Radius").setDesc("Set the border radius of the highlighted root folder.").addSlider((slider) => slider.setLimits(0, 50, 1).setValue(parseInt(this.plugin.settings.highlightedParentFolderBorderRadius)).onChange(async (value) => {
      const radiusWithPx = `${value}px`;
      this.plugin.settings.highlightedParentFolderBorderRadius = radiusWithPx;
      await this.plugin.saveSettings();
      this.plugin.updateStyles();
    }).setDynamicTooltip());
  }
  // Helper function to convert hex color to RGB
  hexToRgb(hex) {
    const bigint = parseInt(hex.slice(1), 16);
    const r = bigint >> 16 & 255;
    const g = bigint >> 8 & 255;
    const b = bigint & 255;
    return { r, g, b };
  }
  // Helper function to extract RGB values from RGBA string
  extractRgbFromRgba(rgba) {
    const match = rgba.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)/);
    if (match) {
      return {
        r: parseInt(match[1]),
        g: parseInt(match[2]),
        b: parseInt(match[3])
      };
    }
    return { r: 0, g: 0, b: 0 };
  }
  // Helper function to extract alpha value from RGBA string
  extractAlphaFromRgba(rgba) {
    const match = rgba.match(/rgba?\(.*?,\s*([\d.]+)\)/);
    return match ? parseFloat(match[1]) : 1;
  }
  // Helper function to convert RGB to HEX
  rgbToHex(rgb) {
    return "#" + ((1 << 24) + (rgb.r << 16) + (rgb.g << 8) + rgb.b).toString(16).slice(1);
  }
};
//# sourceMappingURL=data:application/json;base64,
